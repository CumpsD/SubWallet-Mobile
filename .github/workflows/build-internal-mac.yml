name: Internal builds

on:
  pull_request:
    branches: [ "koni-dev", "upgrade-ui" ]

jobs:
  # iOS build workflow -------------------------------------------------
  build-ios:
    name: iOS builds
    runs-on: mac-worker
    env:
      GH_PAT: ${{ secrets.GH_PAT }}
      GH_RELEASE_GITHUB_API_TOKEN: ${{ secrets.GH_PAT }}
      KS_PASSWORD: ${{ secrets.KS_PASSWORD }}
      NEXTCLOUD_CONFIG: ${{ secrets.NEXTCLOUD_CONFIG }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      COMMIT_MESSAGE: ${{ github.event.pull_request.title }}
      REF_NAME: ${{ github.ref_name }}
      TRANSAK_API_KEY: ${{ secrets.TRANSAK_API_KEY }}
      COINBASE_PAY_ID: ${{ secrets.COINBASE_PAY_ID }}
      IOS_CODEPUSH_KEY: ${{ secrets.IOS_CODEPUSH_STAGING_KEY }}DISABLED
      ANDROID_CODEPUSH_KEY: ${{ secrets.ANDROID_CODEPUSH_STAGING_KEY }}DISABLED
      BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GH_PAT }}

    - name: Add APP ENV
      run: |
          cp .env.development.example .env.production
          if [ -f .env.production ]; then
            sed -i '' "s/^TRANSAK_API_KEY=.*/TRANSAK_API_KEY=$TRANSAK_API_KEY/" .env.production
            sed -i '' "s/^COINBASE_PAY_ID=.*/COINBASE_PAY_ID=$COINBASE_PAY_ID/" .env.production
            sed -i '' "s/^IOS_CODEPUSH_KEY=.*/IOS_CODEPUSH_KEY=$IOS_CODEPUSH_KEY/" .env.production
            sed -i '' "s/^ANDROID_CODEPUSH_KEY=.*/ANDROID_CODEPUSH_KEY=$ANDROID_CODEPUSH_KEY/" .env.production
            sed -i '' "s/^BUNDLE_ENV=.*/BUNDLE_ENV=STAGING/" .env.production
            else
            echo "TRANSAK_API_KEY=$TRANSAK_API_KEY" >> .env.production
            echo "COINBASE_PAY_ID=$COINBASE_PAY_ID" >> .env.production
            echo "IOS_CODEPUSH_KEY=$IOS_CODEPUSH_KEY" >> .env.production
            echo "ANDROID_CODEPUSH_KEY=$ANDROID_CODEPUSH_KEY" >> .env.production
            echo "BUNDLE_ENV=STAGING" >> .env.production
          fi

    - name: Cache Dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: yarn install --immutable | grep -v 'YN0013'

    - name: Autocheck
      run: node ./scripts/autocheck.mjs

    - name: Install Pods
      run: cd ios && pod update hermes-engine --no-repo-update && cd ..

    # Build IPA file
    - name: iOS Build Action
      uses: yukiarrr/ios-build-action@v1.11.0
      with:
        project-path: ios/SubWalletMobile.xcodeproj
        export-method: 'ad-hoc'
        p12-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        certificate-password: ${{ secrets.P12_PASSWORD }}
        mobileprovision-base64: ${{ secrets.BUILD_ADHOC_PROVISION_PROFILE_BASE64 }}
        code-signing-identity: 'Apple Distribution: CDM SOFTWARE DEVELOPMENT COMPANY LIMITED (ZUZ7T3GQMT)'
        team-id: ${{ secrets.APPLE_TEAM_ID }}
        workspace-path: ios/SubWalletMobile.xcworkspace
        scheme: SubWalletMobile-Production

    - name: Upload iOS to Next cloud
      id: upload-ios
      run: |
        FILE_URL=$(node ./scripts/upload-ios.mjs)
        echo "::set-output name=fileUrl::${FILE_URL}"

    # Notify Discord
    - name: Notify to Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        status: ${{ job.status }}
        username: GitHub Actions Test Notifier
        title: ${{ github.workflow }}
        description: |
          iOS: The Deployment has been completed.
          URL: ${{ steps.upload-ios.outputs.fileUrl }}

  # Android build workflow -------------------------------------------------
  build-android:
    name: Android builds
    runs-on: android-worker
    env:
      GH_PAT: ${{ secrets.GH_PAT }}
      GH_RELEASE_GITHUB_API_TOKEN: ${{ secrets.GH_PAT }}
      KS_PASSWORD: ${{ secrets.KS_PASSWORD }}
      NEXTCLOUD_CONFIG: ${{ secrets.NEXTCLOUD_CONFIG }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      COMMIT_MESSAGE: ${{ github.event.pull_request.title }}
      REF_NAME: ${{ github.ref_name }}
      TRANSAK_API_KEY: ${{ secrets.TRANSAK_API_KEY }}
      COINBASE_PAY_ID: ${{ secrets.COINBASE_PAY_ID }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GH_PAT }}

    - name: Add APP ENV
      run: |
          cp .env.development.example .env.production
          if [ -f .env.production ]; then
            sed -i '' "s/^TRANSAK_API_KEY=.*/TRANSAK_API_KEY=$TRANSAK_API_KEY/" .env.production
            sed -i '' "s/^COINBASE_PAY_ID=.*/COINBASE_PAY_ID=$COINBASE_PAY_ID/" .env.production
            sed -i '' "s/^IOS_CODEPUSH_KEY=.*/IOS_CODEPUSH_KEY=$IOS_CODEPUSH_KEY/" .env.production
            sed -i '' "s/^ANDROID_CODEPUSH_KEY=.*/ANDROID_CODEPUSH_KEY=$ANDROID_CODEPUSH_KEY/" .env.production
            sed -i '' "s/^BUNDLE_ENV=.*/BUNDLE_ENV=STAGING/" .env.production
            else
            echo "TRANSAK_API_KEY=$TRANSAK_API_KEY" >> .env.production
            echo "COINBASE_PAY_ID=$COINBASE_PAY_ID" >> .env.production
            echo "IOS_CODEPUSH_KEY=$IOS_CODEPUSH_KEY" >> .env.production
            echo "ANDROID_CODEPUSH_KEY=$ANDROID_CODEPUSH_KEY" >> .env.production
            echo "BUNDLE_ENV=STAGING" >> .env.production
          fi

    - name: Cache Dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: yarn install --immutable | grep -v 'YN0013'

    - name: Autocheck
      run: node ./scripts/autocheck.mjs

    - name: Prepare sign datarun
      run: |
        echo "${{ secrets.ANDROID_KEY_STORE_BASE64 }}" | base64 --decode > android/app/${{ secrets.MYAPP_UPLOAD_STORE_FILE }}

    # Build APK file
    - name: Generate App APK
      run: |
        cd android && export ENVFILE=.env.production && ./gradlew assembleRelease -PMYAPP_UPLOAD_STORE_FILE=${{ secrets.MYAPP_UPLOAD_STORE_FILE }} -PMYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_KEY_STORE_PASSWORD }} -PMYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }} -PMYAPP_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_ALIAS }}

    - name: Upload APK to Next cloud
      id: upload-android
      run: |
        FILE_URL=$(node ./scripts/upload-android.mjs)
        echo "::set-output name=fileUrl::${FILE_URL}"

    # Notify to Discord
    - name: Notify to Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        status: ${{ job.status }}
        username: GitHub Actions Test Notifier
        title: ${{ github.workflow }}
        description: |
          Android: The Deployment has been completed.
          URL: ${{ steps.upload-android.outputs.fileUrl }}